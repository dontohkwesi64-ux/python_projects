Absolutely! Let’s create a **complete handout for your “Bossu Student Dashboard” lesson**. I’ll make it structured, clear, and ready to use for teaching. Here’s the full version:

---

# **Bossu Student Dashboard – Lesson Handout (Python/Tkinter)**

## **Lesson Objective**

By the end of this lesson, students will be able to:

1. Create a simple GUI application using **Tkinter**.
2. Load, display, add, delete, and sort student records.
3. Understand the use of **lists, dictionaries, functions, and event-driven programming**.
4. Implement data persistence using **text files**.

---

## **1. Project Overview**

We are building a **Student Dashboard** that allows users to:

* Add student details (Name, Age, Grade)
* Delete student records
* Sort records by Age, Grade, or Grade + Age
* View updates in a **table (Treeview)**
* See status updates on every action

The GUI is built with **Tkinter**, Python's standard library for creating desktop apps.

---

## **2. File Structure**

```
python_projects/
│
├── file_sorting_gui_v3.py    # Main Python GUI script
├── students.txt              # File to store student data
├── dist/                     # Folder containing the compiled .exe
└── build/                    # Temporary folder used by PyInstaller
```

* `students.txt` stores records as CSV:
  Example:

  ```
  Janet,29,A
  Sean,30,B
  Collins,22,C
  ```

---

## **3. Code Breakdown**

### **3.1 Importing Modules**

```python
import tkinter as tk
from tkinter import ttk, messagebox
import os
```

* `tkinter`: GUI components
* `ttk`: Modern widgets like `Treeview`
* `messagebox`: Show alerts or warnings
* `os`: File operations

---

### **3.2 Data Handling Functions**

**Load students from file**

```python
def load_students():
    students = []
    if os.path.exists(FILE_NAME):
        with open(FILE_NAME, "r") as file:
            for line in file:
                parts = line.strip().split(",")
                if len(parts) == 3:
                    name, age, grade = parts
                    students.append({"name": name, "age": int(age), "grade": grade})
    return students
```

**Save students to file**

```python
def save_students(students):
    with open(FILE_NAME, "w") as file:
        for s in students:
            file.write(f"{s['name']},{s['age']},{s['grade']}\n")
```

**Refresh table**

```python
def refresh_table():
    for row in tree.get_children():
        tree.delete(row)
    for s in students:
        tree.insert("", "end", values=(s['name'], s['age'], s['grade']))
```

**Update status bar**

```python
def update_status(msg):
    status_var.set(msg)
```

---

### **3.3 Button Actions**

**Add Student**

* Validates inputs
* Adds new student to the list
* Sorts by age automatically
* Saves to file and refreshes table

```python
def add_student():
    ...
```

**Delete Student**

* Deletes selected records from the table
* Updates the file

```python
def delete_student():
    ...
```

**Sorting Functions**

* Sort by Age
* Sort by Grade
* Sort by Grade + Age

```python
def sort_by_age(): ...
def sort_by_grade(): ...
def sort_by_grade_then_age(): ...
```

---

### **3.4 GUI Layout**

**Window Setup**

```python
root = tk.Tk()
root.title("Bossu Dashboard Edition – 3.0")
root.geometry("720x500")
root.configure(bg="#f0f4f7")
```

**Header**

```python
tk.Label(root, text="Bossu Student Dashboard", font=("Segoe UI", 16, "bold"), bg="#2b5797", fg="white", pady=10).pack(fill="x")
```

**Input Fields**

* Name, Age, Grade entries
* Add Student button

**Table**

* Treeview widget to display students
* Scrollbar for navigation

**Buttons**

* Delete Selected
* Sort by Age
* Sort by Grade
* Sort by Grade + Age

**Status Bar**

```python
status_var = tk.StringVar(value="Ready.")
status_bar = tk.Label(root, textvariable=status_var, bg="#2b5797", fg="white", anchor="w", padx=10)
status_bar.pack(fill="x", side="bottom")
```

---

### **3.5 Event-Driven Programming**

* Buttons trigger **functions** using `command=`
* GUI updates automatically via `refresh_table()` and `update_status()`

---

## **4. Running the Application**

### **Option 1: Run via Python**

```bash
python file_sorting_gui_v3.py
```

### **Option 2: Run the Compiled .exe**

* Use PyInstaller to create one executable file:

```bash
pyinstaller --clean --noconfirm --onefile --windowed --name "Bossu_Dashboard_Edition" file_sorting_gui_v3.py
```

* The executable will be in `dist/` folder.

---

## **5. Lesson Activities**

1. Add 3–5 student records
2. Test all **sort buttons**
3. Delete one record
4. Check that the file `students.txt` updates correctly
5. Observe the **status bar** messages

---

## **6. Discussion Points**

* Why use **dictionaries** instead of tuples?
* Why is **Treeview** used for table display?
* How does **Tkinter handle button clicks**?
* How do **lambda functions** help in sorting?
* What happens if `students.txt` does not exist?

---

## **7. Key Takeaways**

* Tkinter is powerful for **simple desktop apps**
* Event-driven programming allows **user interaction**
* Data can be **persisted in files**
* Sorting and filtering are easy with **Python lists + lambda**
* GUI apps improve **engagement and understanding**

---

I can also create a **handout with diagrams + screenshots of the dashboard** for even easier teaching. It’ll show how the **table, buttons, and status bar** interact visually.

Do you want me to make that enhanced version too?
